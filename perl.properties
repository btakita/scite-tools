# Define SciTE settings for Perl files.

file.patterns.perl=*.pl;*.pm;*.cgi;*.pod
shbang.perl=pl
filter.perl=Perl (pl pm)|$(file.patterns.perl)|
lexer.$(file.patterns.perl)=perl

keywords.$(file.patterns.perl)=\
NULL __FILE__ __LINE__ __PACKAGE__ __DATA__ __END__ AUTOLOAD \
BEGIN CORE DESTROY END EQ GE GT INIT LE LT NE CHECK abs accept \
alarm and atan2 bind binmode bless caller chdir chmod chomp chop \
chown chr chroot close closedir cmp connect continue cos crypt \
dbmclose dbmopen defined delete die do dump each else elsif endgrent \
endhostent endnetent endprotoent endpwent endservent eof eq eval \
exec exists exit exp fcntl fileno flock for foreach fork format \
formline ge getc getgrent getgrgid getgrnam gethostbyaddr gethostbyname \
gethostent getlogin getnetbyaddr getnetbyname getnetent getpeername \
getpgrp getppid getpriority getprotobyname getprotobynumber getprotoent \
getpwent getpwnam getpwuid getservbyname getservbyport getservent \
getsockname getsockopt glob gmtime goto grep gt hex if index \
int ioctl join keys kill last lc lcfirst le length link listen \
local localtime lock log lstat lt map mkdir msgctl msgget msgrcv \
msgsnd my ne next no not oct open opendir or ord our pack package \
pipe pop pos print printf prototype push quotemeta qu \
rand read readdir readline readlink readpipe recv redo \
ref rename require reset return reverse rewinddir rindex rmdir \
scalar seek seekdir select semctl semget semop send setgrent \
sethostent setnetent setpgrp setpriority setprotoent setpwent \
setservent setsockopt shift shmctl shmget shmread shmwrite shutdown \
sin sleep socket socketpair sort splice split sprintf sqrt srand \
stat study sub substr symlink syscall sysopen sysread sysseek \
system syswrite tell telldir tie tied time times truncate \
uc ucfirst umask undef unless unlink unpack unshift untie until \
use utime values vec wait waitpid wantarray warn while write \
xor

word.characters.$(file.patterns.perl)=$(chars.alpha)$(chars.numeric)_$@%&

comment.block.perl=#~
block.start.$(file.patterns.perl)=10 {
block.end.$(file.patterns.perl)=10 }

colour.perl.heredoc=$(colour.embedded.comment)

#fold.perl.package=1
#fold.perl.pod=1

# Perl styles
# The perl styles are set to lots of different foreground and background colours as an
# aid to debugging SciTE's Perl lexer - not because this is a good way to display Perl.
style.perl.32=
# White space
style.perl.0=
# Error
style.perl.1=$(colour.error)
# Comment
style.perl.2=$(colour.comment)
# POD: = at beginning of line
style.perl.3=$(colour.comment)
# Number
style.perl.4=$(colour.number)
# Keyword
style.perl.5=$(colour.keyword)
# Double quoted string
style.perl.6=$(colour.string)
# Single quoted string
style.perl.7=$(colour.string)
# Symbols / Punctuation. Currently not used by LexPerl.
style.perl.8=
# Preprocessor. Currently not used by LexPerl.
style.perl.9=
# Operators
style.perl.10=$(colour.operator)
# Identifiers (functions, etc.)
style.perl.11=
# Scalars: $var
style.perl.12=
# Array: @var
style.perl.13=
# Hash: %var
style.perl.14=
# Symbol table: *var
style.perl.15=
# Regex: /re/ or m{re}
style.perl.17=$(colour.string),back:#262626
# Substitution: s/re/ore/
style.perl.18=$(colour.string),back:#262626
# Long Quote (qq, qr, qw, qx) -- obsolete: replaced by qq, qx, qr, qw
style.perl.19=$(colour.string),back:#262626
# Back Ticks
style.perl.20=$(colour.string),back:#262626
# Data Section: __DATA__ or __END__ at beginning of line
style.perl.21=
# Here-doc (delimiter)
style.perl.22=back:#262626
# Here-doc (single quoted, q)
style.perl.23=$(colour.string),back:#262626
# Here-doc (double quoted, qq)
style.perl.24=$(colour.string),back:#262626
# Here-doc (back ticks, qx)
style.perl.25=$(colour.string),back:#262626
# Single quoted string, generic
style.perl.26=$(colour.string),back:#262626
# qq = Double quoted string
style.perl.27=$(style.perl.6)
# qx = Back ticks
style.perl.28=$(style.perl.20)
# qr = Regex
style.perl.29=$(style.perl.17)
# qw = Array
style.perl.30=$(style.perl.13)
# POD: verbatim paragraphs
style.perl.31=
# Braces are only matched in operator style
braces.perl.style=10

command.go.$(file.patterns.perl)=perl -w $(FileNameExt)

command.compile.$(file.patterns.perl)=perl -c -w $(FileNameExt)
command.name.0.$(file.patterns.perl)=Lint
command.0.$(file.patterns.perl)=perl -MO=Lint,all $(FileNameExt)

command.name.1.$(file.patterns.perl)=Check Syntax
command.1.$(file.patterns.perl)=perl -cw $(FileNameExt)

command.name.2.$(file.patterns.perl)=Code Profiler
command.2.$(file.patterns.perl)=perl -d:DProf $(FileNameExt)

command.name.3.$(file.patterns.perl)=Profiler Parser
command.3.$(file.patterns.perl)=C:\Perl\bin\dprofpp.bat $(FileDir)\tmon.out
